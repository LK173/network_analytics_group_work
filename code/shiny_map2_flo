---
title: "Shiny_directed_graph"
output: html_document
date: "2023-03-14"
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

```{r}
# Load the Required Libraries---------------------------------------------------
library(shiny)
library(dplyr)
library(ggplot2)
library(igraph)
library(visNetwork)
library(ggmap)
library(RgoogleMaps)
```

```{r}
# set the bounding box for the map
bbox <- c(-180, -60, 180, 80)

# retrieve the map
map <- get_stamenmap(bbox, zoom = 2, maptype = "toner-lite")
```


```{r}
#Load the Data
df.football.transfer <- read.csv(file = '../data/football-transfers.csv')
data <- df.football.transfer
```

```{r}
# UI
ui <- fluidPage(
  titlePanel("Football Transfers Map"),
  
  sidebarLayout(
    sidebarPanel(
      h4("Filters"),
      sliderInput("season", "Select season:",
                  min = min(data$season),
                  max = max(data$season),
                  value = c(min(data$season), max(data$season)),
                  step = 1),
      selectInput("metric", "Select metric:",
                  c("Highest Average Market Value", "Highest Average Performance", "Highest Average Fee")),
      selectInput("position", "Select position:",
                  c("All", "Goalkeeper", "Defence", "Midfield", "Attack"))
    ),
    
    mainPanel(
      plotOutput("football_map", width = "80%", height = "700px"),
      dataTableOutput("top_countries_table")
    )
  )
)

# SERVER
server <- function(input, output) {
  
  # filter the data by season and position
  df_filtered <- reactive({
    df <- data %>%
      filter(season >= input$season[1] & season <= input$season[2])
    
    if (input$position != "All") {
      df <- df %>% filter(position_category == input$position)
    }
    
    return(df)
  })
  
  # create a summary table of the top 10 dealing countries by selected metric
  df_map <- reactive({
    metric_col <- case_when(
      input$metric == "Highest Average Market Value" ~ "market_value",
      input$metric == "Highest Average Performance" ~ "normalized_performance",
      input$metric == "Lowest Average Fee" ~ "fee"
    )
    
    df_filtered() %>% 
      group_by(dealing_country_lat, dealing_country_lon, dealing_country) %>% 
      summarise(avg_metric = mean(!!sym(metric_col)), n_transfers = n(), .groups = 'drop') %>% 
      filter(!is.na(avg_metric)) %>% 
      arrange(ifelse(input$metric == "Lowest Average Fee", avg_metric, desc(avg_metric)),
              ifelse(input$metric == "Lowest Average Fee", avg_metric, desc(avg_metric))) %>%
      slice_max(order_by = avg_metric, n = 10)
  })
  
  # create the top countries table
  output$top_countries_table <- renderDataTable({
    df_map() %>%
      mutate(n_transfers = sapply(dealing_country, function(x) {
        sum(df_filtered()$dealing_country == x)
      })) %>%
      mutate(avg_age = sapply(dealing_country, function(x) {
        mean(df_filtered()$age[df_filtered()$dealing_country == x], na.rm = TRUE)
      })) %>%
      select(dealing_country, n_transfers, avg_age, avg_metric) %>%
      rename(`Country` = dealing_country, `No. Transfers` = n_transfers, `Average Age` = avg_age, !!input$metric := avg_metric)
  })

  # create the map
  output$football_map <- renderPlot({
    ggmap(map, width = 5000, height = 3000) + 
      geom_point(data = df_map(), aes(x = dealing_country_lon, y = dealing_country_lat, size = avg_metric), alpha = 0.6, color = "#FF5733") +
      scale_size_continuous(range = c(1, 5)) +
      labs(size = paste(input$metric, "(in millions of euros)"),
           title = paste("Top Ten Dealing Countries by", input$metric, "- Season", input$season[1], "-", input$season[2])) +
      theme_void() +
      theme(plot.title = element_text(size = 16, face = "bold", margin = margin(b = 20, t = 30)),
            legend.position = "bottom",
            legend.text = element_text())
})
}


# APP
shinyApp(ui, server)
```

